{"author":{"id":"708ccc11728eda0dd404c8de33ac6b44bac2ffc95b2ffc6ea90ce98ccdb43935"},"ops":[{"type":3,"timestamp":1653319832,"metadata":{"github-id":"IC_kwDOCGKeh85DpAVT","github-url":"https://github.com/MichaelMure/git-bug/issues/704#issuecomment-1134822739"},"nonce":"+XPtyZcJViEvP0bOtAw5wY2uwzM=","message":"\u003e The example actually highlights my question about how to the underlying Git repository - the two lines at\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/entity/dag/example_test.go#L345\n\u003e will result in the Lamport clocks, indices and cache files being stored at `.git/git-bug`. Using that one directory for all applications doesn't matter so much for the indices and cache files other than it clutters up git-bug's temporary space. Sharing that directory for the Lamport clocks has the side-effect of any update to one application's data increasing the shared clocks. This might matter as the clocks might seem to be arbitrarily advanced.\n\nThis code also wasn't written with multiple app sharing that same space, but that's actually a good point now that there is a reusable data structure. Luckily that's easy-ish to change as git-bug will recreate all those temp files if they are not found after changing the path.\n\nThe path for `LocalStorage` in the git repository is hard-coded in three places in this file -\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/repository/gogit.go#L75\n\u003e .\n\nYeah it's probably a good idea to make that configurable.\n\n\u003e I was also trying to reuse `RepoCache` (or parts of it) and it doesn't seem to be nearly as friendly to alternate entities. I see obvious reasons for specialization in indexing but it seems like basic caching could also be made general (I previously would have said \"generic\") like the the underlying storage (repository).\n\nIt's like that because I didn't find a better way to do it (also, this generic datastructure is quite a recent thing). Maybe go generics could help here?\n\n\n\u003e I see in the README that you're looking for help - at this point, I'm probably more adept with git-bug's core and CLI but could probably help with termui.\n\nI listed the different UIs and bridges because they are self-contained and easier to grasp. If the core is what tickles you, by all mean go ahead ;)\n\nThanks again for this amazing project ... I'm a convert from `bugs-everywhere` and the idea of distributed bug-tracking, PRs, gist (equivalents), etc will soon be considered mainstream. Here's looking forward to the day when we stop using centralized \"hubs\" for with our distributed source repository. And perhaps the ultimate in distributed sharing happens using IPFS or Hyperswarm. At that point, git behaves more like Bittorrent and distributed file-sharing provides the trackers.\n\nYou are preaching to the choire, IPFS is my day job ;-)","files":null},{"type":6,"timestamp":1653319886,"metadata":{"github-id":"UCE_lALOCGKeh85DpAVTziOBImU"},"nonce":"UwhRc1jhmFxU84uWWVQbfMrDysQ=","target":"a1b4967f3a8908307d2d5052c4895fb87a9d0d07d017df37950a320e00062a6f","message":"\u003e The example actually highlights my question about how to the underlying Git repository - the two lines at\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/entity/dag/example_test.go#L345\n\u003e will result in the Lamport clocks, indices and cache files being stored at `.git/git-bug`. Using that one directory for all applications doesn't matter so much for the indices and cache files other than it clutters up git-bug's temporary space. Sharing that directory for the Lamport clocks has the side-effect of any update to one application's data increasing the shared clocks. This might matter as the clocks might seem to be arbitrarily advanced.\n\nThis code also wasn't written with multiple app sharing that same space, but that's actually a good point now that there is a reusable data structure. Luckily that's easy-ish to change as git-bug will recreate all those temp files if they are not found after changing the path.\n\n\u003e The path for `LocalStorage` in the git repository is hard-coded in three places in this file -\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/repository/gogit.go#L75\n\u003e .\n\nYeah it's probably a good idea to make that configurable.\n\n\u003e I was also trying to reuse `RepoCache` (or parts of it) and it doesn't seem to be nearly as friendly to alternate entities. I see obvious reasons for specialization in indexing but it seems like basic caching could also be made general (I previously would have said \"generic\") like the the underlying storage (repository).\n\nIt's like that because I didn't find a better way to do it (also, this generic datastructure is quite a recent thing). Maybe go generics could help here?\n\n\n\u003e I see in the README that you're looking for help - at this point, I'm probably more adept with git-bug's core and CLI but could probably help with termui.\n\nI listed the different UIs and bridges because they are self-contained and easier to grasp. If the core is what tickles you, by all mean go ahead ;)\n\n\u003e Thanks again for this amazing project ... I'm a convert from `bugs-everywhere` and the idea of distributed bug-tracking, PRs, gist (equivalents), etc will soon be considered mainstream. Here's looking forward to the day when we stop using centralized \"hubs\" for with our distributed source repository. And perhaps the ultimate in distributed sharing happens using IPFS or Hyperswarm. At that point, git behaves more like Bittorrent and distributed file-sharing provides the trackers.\n\nYou are preaching to the choire, IPFS is my day job ;-)","files":null},{"type":6,"timestamp":1653319923,"metadata":{"github-id":"UCE_lALOCGKeh85DpAVTziOBI-E"},"nonce":"LDrh4iGURz6yaE8hAnN9pPSf9cA=","target":"a1b4967f3a8908307d2d5052c4895fb87a9d0d07d017df37950a320e00062a6f","message":"\u003e The example actually highlights my question about how to the underlying Git repository - the two lines at\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/entity/dag/example_test.go#L345\n\u003e will result in the Lamport clocks, indices and cache files being stored at `.git/git-bug`. Using that one directory for all applications doesn't matter so much for the indices and cache files other than it clutters up git-bug's temporary space. Sharing that directory for the Lamport clocks has the side-effect of any update to one application's data increasing the shared clocks. This might matter as the clocks might seem to be arbitrarily advanced.\n\nThis code also wasn't written with multiple app sharing that same space, but that's actually a good point now that there is a reusable data structure. Luckily that's easy-ish to change as git-bug will recreate all those temp files if they are not found after changing the path.\n\n\u003e The path for `LocalStorage` in the git repository is hard-coded in three places in this file -\n\u003e \n\u003e https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/repository/gogit.go#L75\n\u003e .\n\nYeah it's probably a good idea to make that configurable.\n\n\u003e I was also trying to reuse `RepoCache` (or parts of it) and it doesn't seem to be nearly as friendly to alternate entities. I see obvious reasons for specialization in indexing but it seems like basic caching could also be made general (I previously would have said \"generic\") like the the underlying storage (repository).\n\nIt's like that because I didn't find a better way to do it (also, this generic datastructure is quite a recent thing). Maybe go generics could help here?\n\n\n\u003e I see in the README that you're looking for help - at this point, I'm probably more adept with git-bug's core and CLI but could probably help with termui.\n\nI listed the different UIs and bridges because they are self-contained and easier to grasp. If the core is what tickles you, by all mean go ahead ;)\n\n\u003e Thanks again for this amazing project ... I'm a convert from `bugs-everywhere` and the idea of distributed bug-tracking, PRs, gist (equivalents), etc will soon be considered mainstream. Here's looking forward to the day when we stop using centralized \"hubs\" for with our distributed source repository. And perhaps the ultimate in distributed sharing happens using IPFS or Hyperswarm. At that point, git behaves more like Bittorrent and distributed file-sharing provides the trackers.\n\nYou are preaching to the choir, IPFS is my day job ;-)","files":null}]}