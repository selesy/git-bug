{"author":{"id":"478adb96712f189e333a8d18503eec33519456539c4c681fef569d2eb4660cf7"},"ops":[{"type":3,"timestamp":1544958205,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0NzYzNDIxNg==","github-url":"https://github.com/MichaelMure/git-bug/issues/18#issuecomment-447634216"},"nonce":"MNrGmFDXXzsHvte0MUWej4nQ49Y=","message":"I'm very interested in such feature.\nFirst let me introduce myself a little bit. I'm working for an Aerospace Company and have 15 years background in industrial and critical software engineering. So to master changes with such software we have two strong requirement for the configuration management:\n- for any source file, I shall always be able to recall for every change, why it was changed.\n- for any change request (issue), I shell be able to retrieve all changes performed on all files. \n\nThis is required for validation and understand why the software behave unexpectedly: did we really the change as we planned? Did we break something by making the change? Concretely for most SCM we used, we simply insert the issue number in the commit message and we have implemented hooks to make such reference mandatory. Currently more and more projects are managed using the atlassian suite and Jira+Fisheye provide the traceability storage and navigation interface by processiong the commit messages. This provide the expected feature to users but requires quite huge infrastructure and potential out-of-sync issues. It's a pity to rely on additional relational database to manage issues and traceability to change when we already have with the SCM a convenient storage system able to track change on items. So git-bug seems to me a must cleaver way of doing a have good potential to do this job well. Anyway it shell become soon much better than my own attempt to do something similar with subversion. See:\n- http://www.eduvax.net/jdev/egpi/\n- http://www.eduvax.net/jdev/egpi/AFF065-2009-NOT337_FP-egpi.pdf (sorry it's french).\n\nI made a little experiment yesterday to hack the prepare-commit-msg in my own git local repository and it is already enough to help me fill my commit messages.\n[prepare-commit-msg.txt](https://github.com/MichaelMure/git-bug/files/2683467/prepare-commit-msg.txt)\n\t\nIt fills the message with the issue number already set with `git bug select \u003cxxxxxx\u003e` or set comment with the list of open issue to ease to pick on (my comment char is configured to ';' to let me use hash for the issue number).\nThen I just need a browser to follow links from commits to issues and from issues to change sets. So may be it's more a termui or webui issue than anything else related to the data model of git-bug.","files":null}]}