{"author":{"id":"210ed509dea49caa8211aaa304f72240f5bce0bab22413c89bf4c7defc1fa8c1"},"ops":[{"type":3,"timestamp":1653323276,"metadata":{"github-id":"IC_kwDOCGKeh85DpQWC","github-url":"https://github.com/MichaelMure/git-bug/issues/704#issuecomment-1134888322"},"nonce":"g1hENTH3hsfjN6+3SKgIbLej7N8=","message":"\u003e IPFS is my day job\n\nMust be nice! ... I have a couple side-projects that are focused around the non-crypto side of web3 (distributed file systems of various sorts).  In addition to writing a distributed journal system (this question), I'm working on a Go implementation of the HyperSwarm protocol with the ultimate goal of bridging HyperSwarm and IPFS - it feels like there should be a way to find documents regardless of where they exist.  I'm also interested in whether something like Gemini could take off as distributed publishing on top of distributed file systems.\n\nDo you have an issue in the core you'd like me to take on?  Generics might be one solution to caching any given entity type but you've managed to generalize `Entity` without them.  It also seems like `multi_repo_cache` could be used for `repo_cache` which seems to be an aggregation of `repo_cache_bug` and `repo_cache_identity`.  I'll play around with the idea of a generic repository cache a bit more.","files":null}]}